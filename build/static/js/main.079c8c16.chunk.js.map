{"version":3,"sources":["components/Header/index.js","components/Image/index.js","components/Result/index.js","App.js","index.js"],"names":["Header","props","className","score","topScore","Images","src","image","imgURL","alt","onClick","clicked","id","Result","correct","App","state","images","imagesData","clickedId","shuffleImages","find","isClicked","setState","resetGame","prevState","updatedImages","map","newScore","newTopScore","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","hasWon","this","Image","key","Component","ReactDOM","render","document","getElementById"],"mappings":"09BAaeA,MAVf,SAAgBC,GACZ,OACI,gCACQ,yBAAKC,UAAU,SAAf,kBACA,yBAAKA,UAAU,cAAf,UAAoCD,EAAME,MAA1C,iBAA+DF,EAAMG,Y,MCQtEC,MAZf,SAAgBJ,GACd,OACE,yBAAKC,UAAU,iBACb,yBACEI,IAAG,cAASL,EAAMM,MAAMC,QACxBC,IAAI,SACJC,QAAS,kBAAMT,EAAMU,QAAQV,EAAMM,MAAMK,S,MCyClCC,MA9Cf,SAAgBZ,GACZ,OAAsB,OAAlBA,EAAMa,QAEF,yBAAKZ,UAAU,UACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,aAAhB,8FAIA,0BAAMA,UAAU,SAAhB,2BAIa,QAAlBD,EAAMa,QAET,yBAAKZ,UAAU,UACX,yBAAKA,UAAU,SACX,0BAAMA,UAAU,OAAhB,YACA,0BAAMA,UAAU,SAAhB,uBACA,iEAMR,yBAAKA,UAAU,UACVD,EAAMa,QACH,yBAAKZ,UAAU,SACX,0BAAMA,UAAU,WAAhB,YACA,0BAAMA,UAAU,SAAhB,kBAKJ,yBAAKA,UAAU,SACX,0BAAMA,UAAU,SAAhB,aACA,0BAAMA,UAAU,SAAhB,8E,OCqETa,E,2MArGXC,MAAQ,CACJC,OAAQC,EACRf,MAAO,EACPC,SAAU,EACVU,QAAS,M,EAGbH,QAAU,SAAAQ,GAMN,GALA,EAAKC,cAAc,EAAKJ,MAAMC,QACT,EAAKD,MAAMC,OAAOI,MACnC,SAAAd,GAAK,OAAIA,EAAMK,KAAOO,KAGTG,UAEb,OADA,EAAKC,SAAS,CAAET,SAAS,IAClB,EAAKU,WAAU,GACM,KAArB,EAAKR,MAAMb,OACpB,EAAKoB,SAAS,CAAEnB,SAAU,EAAKY,MAAMb,MAAQ,IAC7C,EAAKqB,WAAU,IAEb,EAAKD,UAAS,SAAAE,GACV,IAAMC,EAAgBD,EAAUR,OAAOU,KAAI,SAAApB,GAIvC,OAHIA,EAAMK,KAAOO,IACbZ,EAAMe,WAAY,GAEff,KAGPqB,EAAWH,EAAUtB,MAAQ,EAC7B0B,EAAcJ,EAAUrB,SAK5B,OAJIwB,EAAWH,EAAUrB,WACrByB,EAAcD,GAGX,CACHX,OAAQS,EACRvB,MAAOyB,EACPxB,SAAUyB,EACVf,QAAS,Y,EAMzBM,cAAgB,SAAAU,GAIZ,IAHA,IACIC,EACAC,EAFAC,EAAeH,EAAMI,OAGlB,IAAMD,GACTD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAGzCF,EAAiBD,EAFjBG,GAAgB,GAGhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAEzB,EAAKR,SAAS,CACVN,OAAQa,K,EAIhBN,UAAY,SAACc,GACT,EAAKf,UAAS,SAAAE,GAOV,MAAO,CACHR,OAPkBQ,EAAUR,OAAOU,KAAI,SAAApB,GAIvC,OAHIA,EAAMe,YACNf,EAAMe,WAAY,GAEff,KAIPJ,MAAO,EACPW,UAAUwB,GAAS,W,wEAKrB,IAAD,OACL,OACI,6BACI,kBAAC,EAAD,CACInC,MAAOoC,KAAKvB,MAAMb,MAClBC,SAAUmC,KAAKvB,MAAMZ,WAEzB,yBAAKF,UAAU,aACX,yBAAKA,UAAU,UACVqC,KAAKvB,MAAMC,OAAOU,KAAI,SAAApB,GAAK,OACxB,kBAACiC,EAAD,CACIC,IAAKlC,EAAMK,GACXD,QAAS,EAAKA,QACdJ,MAAOA,SAKvB,kBAAC,EAAD,CAAQkC,IAAKF,KAAKvB,MAAMb,MAAOW,QAASyB,KAAKvB,MAAMF,e,GAhGjD4B,aCHlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.079c8c16.chunk.js","sourcesContent":["import React from 'react'\nimport './styles.css'\n\nfunction Header(props) {\n    return (\n        <header>\n                <div className=\"title\">Matt's Animals</div>\n                <div className=\"scoreboard\">Score: {props.score} | Top Score: {props.topScore}</div>\n        </header>\n\n    )\n}\n\nexport default Header","import React from 'react'\nimport './styles.css'\n\nfunction Images(props) {\n  return (\n    <div className='img-container'>\n      <img \n        src={`img/${props.image.imgURL}`} \n        alt='animal' \n        onClick={() => props.clicked(props.image.id)}>\n      </img>\n    </div>\n  )\n}\n\nexport default Images","import React from \"react\";\n\nimport \"./styles.css\";\n\nfunction Result(props) {\n    if (props.correct === null) {\n        return (\n            <div className=\"result\">\n                <div className=\"spans\">\n                    <span className=\"startgame\">\n                        Try to click on an image that you haven't before. The\n                        images will shuffle after you click.\n                    </span>\n                    <span className=\"quote\">\"Aren't they cute?.\"</span>\n                </div>\n            </div>\n        );\n    } else if (props.correct === \"win\") {\n        return (\n            <div className=\"result\">\n                <div className=\"spans\">\n                    <span className=\"win\">You win!</span>\n                    <span className=\"quote\">\"You got them all!\"</span>\n                    <span>Click an image to play again!</span>\n                </div>\n            </div>\n        );\n    } else {\n        return (\n            <div className=\"result\">\n                {props.correct ? (\n                    <div className=\"spans\">\n                        <span className=\"correct\">Correct!</span>\n                        <span className=\"quote\">\n                            \"Good guess!\"\n                        </span>\n                    </div>\n                ) : (\n                    <div className=\"spans\">\n                        <span className=\"wrong\">Try again</span>\n                        <span className=\"quote\">\n                            \"How could you click on the same one, none of them even look the same.\"\n                        </span>\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default Result;","import React, { Component } from \"react\";\n\nimport Header from \"./components/Header\";\nimport Image from \"./components/Image\";\nimport Result from \"./components/Result\";\nimport imagesData from \"./images.json\";\n\nclass App extends Component {\n    state = {\n        images: imagesData,\n        score: 0,\n        topScore: 0,\n        correct: null\n    };\n\n    clicked = clickedId => {\n        this.shuffleImages(this.state.images);\n        const clickedImage = this.state.images.find(\n            image => image.id === clickedId\n        );\n\n        if (clickedImage.isClicked) {\n            this.setState({ correct: false });\n            return this.resetGame(false);\n        } else if (this.state.score === 11) {\n          this.setState({ topScore: this.state.score + 1})\n          this.resetGame(true)\n        } else {\n            this.setState(prevState => {\n                const updatedImages = prevState.images.map(image => {\n                    if (image.id === clickedId) {\n                        image.isClicked = true;\n                    }\n                    return image;\n                });\n\n                let newScore = prevState.score + 1;\n                let newTopScore = prevState.topScore;\n                if (newScore > prevState.topScore) {\n                    newTopScore = newScore;\n                }\n\n                return {\n                    images: updatedImages,\n                    score: newScore,\n                    topScore: newTopScore,\n                    correct: \"true\"\n                };\n            });\n        }\n    };\n\n    shuffleImages = array => {\n        let currentIndex = array.length,\n            temporaryValue,\n            randomIndex;\n        while (0 !== currentIndex) {\n            randomIndex = Math.floor(Math.random() * currentIndex);\n            currentIndex -= 1;\n\n            temporaryValue = array[currentIndex];\n            array[currentIndex] = array[randomIndex];\n            array[randomIndex] = temporaryValue;\n        }\n        this.setState({\n            images: array\n        });\n    };\n\n    resetGame = (hasWon) => {\n        this.setState(prevState => {\n            const updatedImages = prevState.images.map(image => {\n                if (image.isClicked) {\n                    image.isClicked = false;\n                }\n                return image;\n            });\n            return {\n                images: updatedImages,\n                score: 0,\n                correct: (hasWon ? \"win\" : false)\n            };\n        });\n    };\n\n    render() {\n        return (\n            <div>\n                <Header\n                    score={this.state.score}\n                    topScore={this.state.topScore}\n                />\n                <div className=\"container\">\n                    <div className=\"images\">\n                        {this.state.images.map(image => (\n                            <Image\n                                key={image.id}\n                                clicked={this.clicked}\n                                image={image}\n                            />\n                        ))}\n                    </div>\n                </div>\n                <Result key={this.state.score} correct={this.state.correct} />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}